# 워크플로우 이름
name: Unity CI/CD for Gwangju Run

# 워크플로우 트리거 (언제 실행될지)
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# 실행될 작업들 정의
jobs:
  # 빌드 및 배포 작업
  build-and-deploy-android: # 작업 ID (고유해야 함)
    name: Build & Deploy Android 🚀 # 작업 이름 (GitHub Actions UI에 표시됨)
    runs-on: ubuntu-latest # 실행 환경 (Ubuntu 최신 버전)

    steps: # 작업 내 실행 단계들
    # 1. 소스 코드 가져오기 (Checkout)
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true # Git LFS 사용하는 경우 true로 설정

    # 2. Git LFS 파일 다운로드 (LFS 사용 시)
    - name: Pull Git LFS files
      run: git lfs pull

    # 3. Setup Unity Editor (buildalon)
    - name: Setup Unity Editor (buildalon)
      uses: buildalon/unity-setup@v1.0.0 # 중요: 최신 안정 버전으로 확인/교체 권장
      with:
        unity-version: 6000.0.42f1 # 사용하는 정확한 Unity 버전 명시!
        build-targets: Android # Android 빌드 타겟 명시적으로 추가

    # 4. Activate Unity License (buildalon)
    - name: Activate Unity License (buildalon)
      uses: buildalon/activate-unity-license@v1.0.6 # 중요: 최신 안정 버전으로 확인/교체 권장
      with:
        unity-username: ${{ secrets.UNITY_USERNAME }}
        unity-password: ${{ secrets.UNITY_PASSWORD }}
        # TFA 지원 여부 및 관련 입력은 buildalon/activate-unity-license 문서에서 확인 필요
        # (예: authenticator-key: ${{ secrets.UNITY_AUTHENTICATOR_KEY }} )

    # 5. Build Unity Project (buildalon)
    - name: Build Unity Project (Android - buildalon)
      uses: buildalon/unity-action@v1.0.0 # 중요: 최신 안정 버전으로 확인/교체 권장
      id: build-android # 빌드 결과를 참조하기 위한 ID
      with:
        project-path: . # Unity 프로젝트 경로 (루트이므로 .)
        target-platform: Android
        # 추가적인 빌드 옵션은 buildalon/unity-action 문서 참조
        # 예: build-name: GwangjuRun
        #     android-app-bundle: true # AAB 파일로 빌드하려면

    # 6. AWS 자격 증명 설정
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 7. 빌드 결과물 S3에 업로드
    - name: Upload Android Build to S3
      run: |
        echo "Checking for build artifacts..."
        # buildalon/unity-action 액션의 출력 변수를 확인하여 정확한 빌드 경로를 사용해야 합니다.
        # 아래는 예시 경로이며, 실제 출력 변수 이름 (예: steps.build-android.outputs.artifactsPath)과
        # 그 하위 경로 구조를 buildalon 문서에서 확인하고 수정해야 합니다.
        BUILD_OUTPUT_PATH="${{ steps.build-android.outputs.artifactsPath }}/Android" # 예시 경로, 실제 buildalon 출력에 따라 수정 필요

        if [ -d "$BUILD_OUTPUT_PATH" ] && [ "$(ls -A $BUILD_OUTPUT_PATH)" ]; then
          echo "Build artifacts found at $BUILD_OUTPUT_PATH. Uploading to S3..."
          aws s3 cp "$BUILD_OUTPUT_PATH/" "s3://${{ secrets.S3_BUCKET_NAME }}/builds/android/$(date +%Y-%m-%d)-${{ github.sha }}/" --recursive --acl private
          echo "Build uploaded to s3://${{ secrets.S3_BUCKET_NAME }}/builds/android/$(date +%Y-%m-%d)-${{ github.sha }}/"
        else
          echo "Build artifacts path '$BUILD_OUTPUT_PATH' not found or empty. Skipping S3 upload."
          echo "Listing contents of ${{ steps.build-android.outputs.artifactsPath }} (if it exists):"
          ls -R ${{ steps.build-android.outputs.artifactsPath }} || echo "artifactsPath not found or empty."
          # 빌드 실패로 간주하고 워크플로우 실패 처리 (선택 사항)
          # exit 1
        fi
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # 8. (선택 사항) Google Play Store 배포
    #    - GOOGLE_PLAY_SERVICE_ACCOUNT_JSON Secret 및 사전 설정 필요
    #    - 아래 부분을 사용하려면 주석(#)을 제거하고 설정을 맞추세요.
    # - name: Deploy to Google Play Internal Testing
    #   if: github.ref == 'refs/heads/master' && success() # 이전 단계 성공 시에만 실행
    #   uses: r0adkll/upload-google-play@v1
    #   with:
    #     serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
    #     packageName: com.yourcompany.gwangjurun # 앱의 패키지 이름으로 변경!
    #     releaseFiles: ${{ steps.build-android.outputs.artifactsPath }}/Android/*.aab # buildalon 출력 경로 및 AAB 파일 경로 (APK인 경우 *.apk)
    #     track: internal # 배포 트랙 (internal, alpha, beta, production)
    #     status: completed # 배포 상태